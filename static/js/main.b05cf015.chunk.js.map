{"version":3,"sources":["redux/actions/player.js","redux/actions/game.js","Services/fetchApi.js","redux/actions/index.js","Components/SelectSettings.js","Pages/cube.js","Pages/Login.js","Components/Header.js","Components/timer.js","Components/TriviaCardsBA.js","Components/correct.js","Components/TriviaCardsMA.js","Components/FeedHeader.js","Components/gz.js","Pages/Feedback.js","Pages/Trivia.js","Pages/Ranking.js","App.js","redux/reducers/player.js","redux/reducers/game.js","redux/reducers/index.js","redux/store/index.js","index.js"],"names":["playerLogin","email","name","type","playerScore","score","rightAnswers","number","wrongAnswers","setZeroState","right","requestQuestions","questions","updateIndex","index","a","fetch","endpoint","json","fetchTrivia","requestApiToken","dispatch","response","apiToken","localStorage","setItem","token","Error","requestApiQuestions","fecthTrivia","results","console","log","SelectSettings","state","btnSettings","className","renderSettings","bind","changeState","this","setState","data-testid","onClick","Component","Cube","role","aria-label","Login","props","disableBtn","handleChange","handleLogin","play","createLocalStorage","createBtnPlay","player","gravatarEmail","assertions","JSON","stringify","event","target","value","dispatchNameEmail","length","getToken","getQuestions","to","disabled","onChange","placeholder","autoComplete","connect","Header","alt","src","Timer","count","timerCaller","checkCounter","getCounter","counter","clearInterval","myInterval","setInterval","prevState","timeCounter","BooleanAnswers","rightAnswerClass","wrongAnswerClass","nextButton","correctAnswer","btnDisplayed","btnDisabled","show","validateAnswers","updateQuestIndex","answerCheck","nextQuestion","createNextBtn","endTime","updateLocalStorage","html","txt","document","createElement","innerHTML","setTimeout","newIndex","questIndex","dispatchIndex","option","question","correct_answer","e","dispatchCorrect","dispatchWrong","dispatchScore","answer","innerText","types","difficulty","click","decodeHtml","category","map","dataTestId","key","renderTimer","game","num","MultipleAnswers","choice","incorrect_answers","FeedHeader","hash","getHash","md5","toString","Gz","Feedback","message","setGlobalState","parse","getItem","ranking","push","picture","dispatchZero","correctAnswers","Trivia","update","quest","parseInt","Array","TriviaCardsMA","TriviaCardsBA","Ranking","players","sort","player1","player2","App","exact","path","component","INITIAL_STATE","action","loading","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b05cf015.chunk.js","sourcesContent":["export const LOGIN = 'LOGIN';\nexport const playerLogin = (email, name) => ({\n  type: LOGIN,\n  email,\n  name,\n});\n\nexport const SCORE = 'SCORE';\nexport const playerScore = (score) => ({\n  type: SCORE,\n  score,\n});\n\nexport const TIME_COUNTER = 'TIME_COUNTER';\nexport const timeCounter = (counter) => ({\n  type: TIME_COUNTER,\n  counter,\n});\n\nexport const CORRECT = 'CORRECT';\nexport const rightAnswers = (number) => ({\n  type: CORRECT,\n  number,\n});\n\nexport const WRONG = 'WRONG';\nexport const wrongAnswers = (number) => ({\n  type: WRONG,\n  number,\n});\n\nexport const SET_ZERO = 'SET_ZERO';\nexport const setZeroState = (score, right) => ({\n  type: SET_ZERO,\n  score,\n  right,\n});\n","export const REQUEST_QUESTIONS = 'REQUEST_QUESTIONS';\nexport const requestQuestions = (questions) => ({\n  type: REQUEST_QUESTIONS,\n  questions,\n});\n\nexport const REQUEST_TOKEN = 'REQUEST_TOKEN';\nexport const requestToken = (token) => ({\n  type: REQUEST_TOKEN,\n  token,\n});\n\nexport const UPDATE_INDEX = 'UPDATE_INDEX';\nexport const updateIndex = (index) => ({\n  type: UPDATE_INDEX,\n  index,\n});\n","async function fetchTrivia() {\n  const endpoint = await fetch('https://opentdb.com/api.php?amount=5');\n  const questions = await endpoint.json();\n  return questions;\n}\n\nexport default fetchTrivia;\n","import {\n  playerLogin, rightAnswers, wrongAnswers, timeCounter, playerScore, setZeroState,\n} from './player';\nimport { requestQuestions, requestToken, updateIndex } from './game';\nimport fecthTrivia from '../../Services/fetchApi';\n\nexport {\n  playerLogin,\n  requestQuestions,\n  requestToken,\n  updateIndex,\n  rightAnswers,\n  wrongAnswers,\n  timeCounter,\n  playerScore,\n  setZeroState,\n};\n\nexport const requestApiToken = () => (\n  async (dispatch) => {\n    try {\n      const response = await fetch('https://opentdb.com/api_token.php?command=request');\n      const apiToken = await response.json();\n      localStorage.setItem('token', apiToken.token);\n      return dispatch(requestToken(apiToken));\n    } catch (error) {\n      return Error(error);\n    }\n  }\n);\n\nexport const requestApiQuestions = () => async (dispatch) => {\n  dispatch(requestQuestions());\n  try {\n    const response = await fecthTrivia();\n    return dispatch(requestQuestions(response.results));\n  } catch (error) {\n    return console.log(error);\n  }\n};\n","import React, { Component } from 'react';\nimport { FiSettings } from 'react-icons/fi';\n// import { connect } from 'react-redux';\n// import PropTypes from 'prop-types';\n\nclass SelectSettings extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      btnSettings: <FiSettings className=\"setting\" />,\n      renderSettings: false,\n    };\n\n    this.renderSettings = this.renderSettings.bind(this);\n    this.changeState = this.changeState.bind(this);\n  }\n\n  changeState() {\n    this.setState({\n      btnSettings: 'Start with Setup',\n      renderSettings: true,\n    });\n    this.renderSettings();\n  }\n\n  renderSettings() {\n    return (\n      <h2 data-testid=\"settings-title\">Settings</h2>\n    );\n  }\n\n  render() {\n    const { btnSettings, renderSettings } = this.state;\n    return (\n      <div>\n        <button\n          className=\"btnLogin setup\"\n          type=\"button\"\n          data-testid=\"btn-settings\"\n          onClick={ this.changeState }\n        >\n          { btnSettings }\n        </button>\n        { renderSettings ? this.renderSettings() : null }\n      </div>\n    );\n  }\n}\n\nexport default SelectSettings;\n","import React, { Component } from 'react';\n\nclass Cube extends Component {\n  render() {\n    return (\n      <div className=\"shape\">\n        <div className=\"ft\"><span /></div>\n        <div className=\"rt\"><span role=\"img\" aria-label=\"rocket\">🚀</span></div>\n        <div className=\"bk\"><span /></div>\n        <div className=\"lt\"><span role=\"img\" aria-label=\"rocket\">🚀</span></div>\n        <div className=\"tp\"><span /></div>\n        <div className=\"bm\"><span /></div>\n      </div>\n    );\n  }\n}\n\nexport default Cube;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { IoPlayOutline } from 'react-icons/io5';\nimport { playerLogin, requestApiToken, requestApiQuestions } from '../redux/actions';\nimport SelectSettings from '../Components/SelectSettings';\nimport Cube from './cube';\nimport './login.css';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      email: '',\n      disableBtn: true,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleLogin = this.handleLogin.bind(this);\n    this.play = this.play.bind(this);\n    this.createLocalStorage = this.createLocalStorage.bind(this);\n    this.createBtnPlay = this.createBtnPlay.bind(this);\n  }\n\n  createLocalStorage() {\n    const { name, email: gravatarEmail } = this.state;\n    const player = { name, gravatarEmail, assertions: 0, score: 0 };\n    localStorage.setItem('state', JSON.stringify({ player }));\n  }\n\n  handleChange(event) {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value,\n    }, () => {\n      this.handleLogin();\n    });\n  }\n\n  handleLogin() {\n    const { email, name } = this.state;\n    const { dispatchNameEmail } = this.props;\n    if (email.length > 0 && name.length > 0) {\n      this.setState({\n        disableBtn: false,\n      });\n      dispatchNameEmail(email, name);\n    } else {\n      this.setState({\n        disableBtn: true,\n      });\n    }\n  }\n\n  play() {\n    const { getToken, getQuestions } = this.props;\n    getQuestions();\n    getToken();\n    this.createLocalStorage();\n  }\n\n  createBtnPlay() {\n    const { disableBtn } = this.state;\n    return (\n      <Link to=\"/trivia\">\n        <button\n          className=\"btnLogin play\"\n          data-testid=\"btn-play\"\n          type=\"button\"\n          disabled={ disableBtn }\n          onClick={ this.play }\n        >\n          <IoPlayOutline className=\"play\" />\n        </button>\n      </Link>\n    );\n  }\n\n  render() {\n    const { email, name } = this.state;\n    return (\n      <div className=\"grid\">\n        <div className=\"backgroundLogin\">\n          <div className=\"container\">\n            <Cube />\n            <div className=\"inputContainer\">\n              <input\n                className=\"inputLogin\"\n                data-testid=\"input-player-name\"\n                type=\"text\"\n                name=\"name\"\n                value={ name }\n                onChange={ this.handleChange }\n                placeholder=\"Informe seu nome\"\n                autoComplete=\"off\"\n              />\n              <input\n                className=\"inputLogin\"\n                data-testid=\"input-gravatar-email\"\n                type=\"text\"\n                name=\"email\"\n                value={ email }\n                onChange={ this.handleChange }\n                placeholder=\"Informe seu email\"\n                autoComplete=\"off\"\n              />\n            </div>\n            <div className=\"buttonContainer\">\n              { this.createBtnPlay() }\n              <SelectSettings />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStatetoProps = (state) => ({\n  player: state.player.player,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchNameEmail: (email, name) => dispatch(playerLogin(email, name)),\n  getToken: () => dispatch(requestApiToken()),\n  getQuestions: () => dispatch(requestApiQuestions()),\n});\n\nLogin.propTypes = {\n  dispatchNameEmail: PropTypes.func.isRequired,\n  getToken: PropTypes.func.isRequired,\n  getQuestions: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStatetoProps, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './header.css';\n\nclass Header extends Component {\n  render() {\n    const { name, score } = this.props;\n    return (\n      <div className=\"headerContainer\">\n        <img className=\"gravatar \" alt=\"\" data-testid=\"header-profile-picture\" src=\"https://store-images.s-microsoft.com/image/apps.13155.7f01bca7-2380-4ec7-b6a8-cf488afa7800.4730a05c-e397-4c82-9935-9d53da020526.5ca39173-dd05-471e-a3cb-766172a62730\" />\n        <p\n          className=\"playerName\"\n          data-testid=\"header-player-name\"\n        >\n          {`Usuário: ${name}`}\n        </p>\n        <p\n          className=\"playerScore\"\n          data-testid=\"header-score\"\n        >\n          {`Pontuação atual: ${score}`}\n        </p>\n      </div>\n    );\n  }\n}\n\nconst mapStatetoProps = (state) => ({\n  name: state.player.name,\n  score: state.player.score,\n});\n\nHeader.propTypes = {\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n};\n\nexport default connect(mapStatetoProps)(Header);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { timeCounter } from '../redux/actions';\n\nclass Timer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 30,\n    };\n    this.timerCaller = this.timerCaller.bind(this);\n    this.checkCounter = this.checkCounter.bind(this);\n  }\n\n  componentDidMount() {\n    this.timerCaller();\n  }\n\n  componentDidUpdate() {\n    this.checkCounter();\n    const { getCounter, counter } = this.props;\n    getCounter(counter);\n  }\n\n  checkCounter() {\n    const { count } = this.state;\n    if (count === 0) clearInterval(this.myInterval);\n  }\n\n  timerCaller() {\n    const interval = 1000;\n    this.myInterval = setInterval(() => {\n      this.setState((prevState) => ({\n        count: prevState.count - 1,\n      }));\n    }, interval);\n  }\n\n  render() {\n    const { count } = this.state;\n    const { getCounter } = this.props;\n    getCounter(count);\n    return (\n      <div>\n        <span className=\"counter\">{ count }</span>\n      </div>\n    );\n  }\n}\n\nconst mapStatetoProps = (state) => ({\n  counter: state.player.counter,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getCounter: (counter) => dispatch(timeCounter(counter)),\n});\n\nTimer.propTypes = {\n  getCounter: PropTypes.func.isRequired,\n  counter: PropTypes.number.isRequired,\n};\n\nexport default connect(mapStatetoProps, mapDispatchToProps)(Timer);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { AiOutlineDoubleRight } from 'react-icons/ai';\nimport { rightAnswers, updateIndex, wrongAnswers, playerScore } from '../redux/actions';\nimport Timer from './timer';\nimport CORRECT from './correct';\nimport './triviaCard.css';\n\nclass BooleanAnswers extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // choice: [],\n      rightAnswerClass: '',\n      wrongAnswerClass: '',\n      nextButton: true,\n      correctAnswer: CORRECT,\n      btnDisplayed: false,\n      btnDisabled: false,\n      show: true,\n    };\n    this.validateAnswers = this.validateAnswers.bind(this);\n    this.updateQuestIndex = this.updateQuestIndex.bind(this);\n    this.answerCheck = this.answerCheck.bind(this);\n    this.nextQuestion = this.nextQuestion.bind(this);\n    this.createNextBtn = this.createNextBtn.bind(this);\n    this.endTime = this.endTime.bind(this);\n    this.updateLocalStorage = this.updateLocalStorage.bind(this);\n  }\n\n  componentDidUpdate() {\n    this.updateLocalStorage();\n    this.endTime();\n  }\n\n  // href = Thiago Vallin / Rafa Reis\n  decodeHtml(html) {\n    const txt = document.createElement('textarea');\n    txt.innerHTML = html;\n    return txt.value;\n  }\n\n  updateLocalStorage() {\n    const { player } = this.props;\n    localStorage.setItem('state', JSON.stringify({ player }));\n    console.log(player);\n  }\n\n  endTime() {\n    const finalTime = 30000;\n    setTimeout(() => {\n      this.setState({\n        nextButton: false,\n        btnDisplayed: true,\n        btnDisabled: true,\n        show: false,\n      });\n    }, finalTime);\n  }\n\n  updateQuestIndex() {\n    const { questIndex, dispatchIndex } = this.props;\n    let newIndex = questIndex;\n    newIndex += 1;\n    dispatchIndex(newIndex);\n  }\n\n  validateAnswers(option, index) {\n    const { question } = this.props;\n    if (question.correct_answer !== option) {\n      return `wrong-answer-${index}`;\n    }\n    return CORRECT;\n  }\n\n  answerCheck(e) {\n    const {\n      dispatchCorrect, dispatchWrong, question, counter, dispatchScore,\n    } = this.props;\n    const { target } = e;\n    const answer = target.innerText;\n    const correct = 10;\n    const types = { easy: 1, medium: 2, hard: 3 };\n    this.setState({\n      nextButton: false,\n      rightAnswerClass: 'rightAnswer',\n      wrongAnswerClass: 'wrongAnswer',\n      btnDisplayed: true,\n      btnDisabled: true,\n      show: false,\n    });\n    if (this.validateAnswers(answer) === CORRECT) {\n      dispatchCorrect(1);\n      switch (question.difficulty) {\n      case 'hard':\n        return (dispatchScore(correct + (counter * types.hard)));\n      case 'medium':\n        return (dispatchScore(correct + (counter * types.medium)));\n      default:\n        return (dispatchScore(correct + (counter * types.easy)));\n      }\n    } else { dispatchWrong(1); }\n  }\n\n  nextQuestion() {\n    this.updateQuestIndex();\n    // this.createChoices();\n    this.endTime();\n    this.setState({ rightAnswerClass: '',\n      wrongAnswerClass: '',\n      nextButton: true,\n      btnDisplayed: false,\n      btnDisabled: false,\n      show: true,\n    });\n  }\n\n  createNextBtn(click, state) {\n    return (\n      <button\n        className=\"next\"\n        data-testid=\"btn-next\"\n        type=\"button\"\n        onClick={ click }\n        disabled={ state }\n      >\n        <AiOutlineDoubleRight />\n      </button>\n    );\n  }\n\n  renderTimer() {\n    return <Timer />;\n  }\n\n  render() {\n    const {\n      btnDisplayed,\n      rightAnswerClass,\n      wrongAnswerClass,\n      nextButton,\n      correctAnswer,\n      btnDisabled,\n      show,\n    } = this.state;\n    const { question } = this.props;\n    const answers = ['True', 'False'];\n    const index = 0;\n    return (\n      <div className=\"triviaCard\">\n        <h3 className=\"category\" data-testid=\"question-category\">\n          { this.decodeHtml(question.category) }\n        </h3>\n        <p\n          className=\"text\"\n          data-testid=\"question-text\"\n        >\n          { this.decodeHtml(question.question) }\n        </p>\n        <div className=\"answers\">\n          { answers.map((option) => {\n            const dataTestId = this.validateAnswers(option, index);\n            return (\n              <button\n                className={ dataTestId === correctAnswer ? rightAnswerClass\n                  : wrongAnswerClass }\n                type=\"button\"\n                key={ option }\n                disabled={ btnDisabled }\n                data-testid={ dataTestId }\n                onClick={ this.answerCheck }\n              >\n                { this.decodeHtml(option) }\n              </button>);\n          })}\n        </div>\n        { btnDisplayed ? this.createNextBtn(this.nextQuestion, nextButton)\n          : null}\n        <div className=\"timer\">\n          { show ? this.renderTimer() : null }\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ game, player }) => ({\n  questIndex: game.index,\n  counter: player.counter,\n  player: player.player,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchIndex: (index) => dispatch(updateIndex(index)),\n  dispatchCorrect: (num) => dispatch(rightAnswers(num)),\n  dispatchWrong: (num) => dispatch(wrongAnswers(num)),\n  dispatchScore: (score) => dispatch(playerScore(score)),\n});\n\nBooleanAnswers.propTypes = {\n  counter: PropTypes.number.isRequired,\n  questIndex: PropTypes.number.isRequired,\n  dispatchIndex: PropTypes.func.isRequired,\n  dispatchCorrect: PropTypes.func.isRequired,\n  dispatchWrong: PropTypes.func.isRequired,\n  dispatchScore: PropTypes.func.isRequired,\n  question: PropTypes.shape({\n    correct_answer: PropTypes.string,\n    incorrect_answers: PropTypes.arrayOf(PropTypes.string),\n    category: PropTypes.string,\n    question: PropTypes.string,\n    difficulty: PropTypes.string,\n  }).isRequired,\n  player: PropTypes.shape({\n    name: PropTypes.string,\n    assertions: PropTypes.number,\n    score: PropTypes.number,\n    gravatarEmail: PropTypes.string,\n  }).isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BooleanAnswers);\n","const CORRECT = 'correct-answer';\nexport default CORRECT;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { AiOutlineDoubleRight } from 'react-icons/ai';\nimport { rightAnswers, updateIndex, wrongAnswers, playerScore } from '../redux/actions';\nimport Timer from './timer';\nimport CORRECT from './correct';\nimport './triviaCard.css';\n\nclass MultipleAnswers extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rightAnswerClass: '',\n      wrongAnswerClass: '',\n      nextButton: true,\n      correctAnswer: CORRECT,\n      btnDisplayed: false,\n      btnDisabled: false,\n      show: true,\n    };\n    this.validateAnswers = this.validateAnswers.bind(this);\n    this.updateQuestIndex = this.updateQuestIndex.bind(this);\n    this.answerCheck = this.answerCheck.bind(this);\n    this.nextQuestion = this.nextQuestion.bind(this);\n    this.createNextBtn = this.createNextBtn.bind(this);\n    this.updateLocalStorage = this.updateLocalStorage.bind(this);\n  }\n\n  componentDidUpdate() {\n    this.updateLocalStorage();\n    this.endTime();\n  }\n\n  updateLocalStorage() {\n    const { player } = this.props;\n    localStorage.setItem('state', JSON.stringify({ player }));\n  }\n\n  decodeHtml(html) {\n    const txt = document.createElement('textarea');\n    txt.innerHTML = html;\n    return txt.value;\n  }\n\n  endTime() {\n    const finalTime = 30000;\n    setTimeout(() => {\n      this.setState({\n        nextButton: false,\n        btnDisplayed: true,\n        btnDisabled: true,\n        show: false,\n      });\n    }, finalTime);\n  }\n\n  updateQuestIndex() {\n    const { questIndex, dispatchIndex } = this.props;\n    let newIndex = questIndex;\n    newIndex += 1;\n    dispatchIndex(newIndex);\n  }\n\n  validateAnswers(answer, index) {\n    const { question } = this.props;\n    if (question.correct_answer !== answer) {\n      return `wrong-answer-${index}`;\n    }\n    return CORRECT;\n  }\n\n  answerCheck(e) {\n    const {\n      dispatchCorrect, dispatchWrong, question, counter, dispatchScore,\n    } = this.props;\n    const { target } = e;\n    const answer = target.innerText;\n    const correct = 10;\n    const types = { easy: 1, medium: 2, hard: 3 };\n    this.setState({\n      nextButton: false,\n      rightAnswerClass: 'rightAnswer',\n      wrongAnswerClass: 'wrongAnswer',\n      btnDisplayed: true,\n      btnDisabled: true,\n      show: false,\n    });\n    if (this.validateAnswers(answer) === CORRECT) {\n      dispatchCorrect(1);\n      switch (question.difficulty) {\n      case 'hard':\n        return (dispatchScore(correct + (counter * types.hard)));\n      case 'medium':\n        return (dispatchScore(correct + (counter * types.medium)));\n      default:\n        return (dispatchScore(correct + (counter * types.easy)));\n      }\n    } else { dispatchWrong(1); }\n  }\n\n  nextQuestion() {\n    this.updateQuestIndex();\n    // this.createChoices();\n    this.endTime();\n    this.setState({ rightAnswerClass: '',\n      wrongAnswerClass: '',\n      nextButton: true,\n      btnDisplayed: false,\n      btnDisabled: false,\n      show: true,\n    });\n  }\n\n  createNextBtn(click, state) {\n    return (\n      <button\n        className=\"next\"\n        data-testid=\"btn-next\"\n        type=\"button\"\n        onClick={ click }\n        disabled={ state }\n      >\n        <AiOutlineDoubleRight />\n      </button>\n    );\n  }\n\n  renderTimer() {\n    return <Timer />;\n  }\n\n  render() {\n    const {\n      rightAnswerClass,\n      wrongAnswerClass,\n      nextButton,\n      correctAnswer,\n      btnDisplayed,\n      btnDisabled,\n      show,\n    } = this.state;\n    const { question } = this.props;\n    const choice = [...question.incorrect_answers, question.correct_answer];\n    let index = 0;\n    return (\n      <div className=\"triviaCard\">\n        <h3 className=\"category\" data-testid=\"question-category\">\n          { this.decodeHtml(question.category) }\n        </h3>\n        <p\n          className=\"text\"\n          data-testid=\"question-text\"\n        >\n          { this.decodeHtml(question.question) }\n        </p>\n        <div className=\"answers\">\n          {choice.map((answer) => {\n            const dataTestId = this.validateAnswers(answer, index);\n            if (dataTestId !== correctAnswer) index += 1;\n            return (\n              <button\n                className={ dataTestId === correctAnswer ? rightAnswerClass\n                  : wrongAnswerClass }\n                type=\"button\"\n                key={ answer }\n                disabled={ btnDisabled }\n                data-testid={ dataTestId }\n                onClick={ this.answerCheck }\n              >\n                { this.decodeHtml(answer) }\n              </button>);\n          })}\n        </div>\n        { btnDisplayed ? this.createNextBtn(this.nextQuestion, nextButton)\n          : null}\n        <div className=\"timer\">\n          { show ? this.renderTimer() : null }\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ game, player }) => ({\n  questIndex: game.index,\n  counter: player.counter,\n  player: player.player,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchIndex: (index) => dispatch(updateIndex(index)),\n  dispatchCorrect: (num) => dispatch(rightAnswers(num)),\n  dispatchWrong: (num) => dispatch(wrongAnswers(num)),\n  dispatchScore: (score) => dispatch(playerScore(score)),\n\n});\n\nMultipleAnswers.propTypes = {\n  counter: PropTypes.number.isRequired,\n  questIndex: PropTypes.number.isRequired,\n  dispatchIndex: PropTypes.func.isRequired,\n  dispatchCorrect: PropTypes.func.isRequired,\n  dispatchWrong: PropTypes.func.isRequired,\n  dispatchScore: PropTypes.func.isRequired,\n  question: PropTypes.shape({\n    correct_answer: PropTypes.string,\n    incorrect_answers: PropTypes.arrayOf(PropTypes.string),\n    category: PropTypes.string,\n    question: PropTypes.string,\n    difficulty: PropTypes.string,\n  }).isRequired,\n  player: PropTypes.shape({\n    name: PropTypes.string,\n    assertions: PropTypes.number,\n    score: PropTypes.number,\n    gravatarEmail: PropTypes.string,\n  }).isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MultipleAnswers);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport md5 from 'crypto-js/md5';\nimport './feedHeader.css';\n\nclass FeedHeader extends Component {\n  constructor() {\n    super();\n    this.state = {\n      hash: '',\n    };\n    this.getHash = this.getHash.bind(this);\n  }\n\n  componentDidMount() {\n    this.getHash();\n  }\n\n  getHash() {\n    const { email } = this.props;\n    const hash = md5(email).toString();\n    this.setState({\n      hash,\n    });\n  }\n\n  render() {\n    const { name, score } = this.props;\n    const { hash } = this.state;\n    return (\n      <div className=\"feedHeader\">\n        <img\n          alt=\"profile-img\"\n          data-testid=\"header-profile-picture\"\n          src={ `https://www.gravatar.com/avatar/${hash}` }\n        />\n        <p data-testid=\"header-player-name\">{`Usuário: ${name}`}</p>\n        <p data-testid=\"header-score\">{`Pontuação: ${score}`}</p>\n      </div>\n    );\n  }\n}\n\nconst mapStatetoProps = (state) => ({\n  name: state.player.name,\n  email: state.player.email,\n  score: state.player.score,\n});\n\nFeedHeader.propTypes = {\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  email: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStatetoProps)(FeedHeader);\n","import React, { Component } from 'react';\n// import './gz.css';\n\nclass Gz extends Component {\n  render() {\n    return (\n      <div className=\"rainbowContainer\">\n        <div className=\"rainbowOne\" />\n        <div className=\"rainbowTwo\" />\n        <div className=\"rainbowFive\" />\n        <div className=\"rainbowThree\" />\n        <div className=\"rainbowFour\" />\n        <div className=\"rainbowSix\" />\n        <div className=\"rainbowSeven\" />\n        <div className=\"rainbowEight\" />\n        <div className=\"rainbowNine\" />\n        <div className=\"rainbowTen\" />\n      </div>\n    );\n  }\n}\n\nexport default Gz;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport md5 from 'crypto-js/md5';\nimport FeedHeader from '../Components/FeedHeader';\nimport {\n  rightAnswers,\n  playerLogin,\n  requestApiToken,\n  requestApiQuestions,\n  wrongAnswers,\n  playerScore,\n  updateIndex,\n  setZeroState } from '../redux/actions';\nimport './feedback.css';\nimport Gz from '../Components/gz';\n\nclass Feedback extends Component {\n  constructor() {\n    super();\n    this.message = this.message.bind(this);\n    this.setGlobalState = this.setGlobalState.bind(this);\n  }\n\n  componentDidMount() {\n    const { player } = JSON.parse(localStorage.getItem('state'));\n    const ranking = JSON.parse(localStorage.getItem('ranking')) || [];\n    const hash = md5(player.gravatarEmail).toString();\n    ranking.push({\n      name: player.name,\n      score: player.score,\n      picture: `https://www.gravatar.com/avatar/${hash}`,\n    });\n    localStorage.setItem('ranking', JSON.stringify(ranking));\n  }\n\n  setGlobalState() {\n    const { dispatchCorrect, dispatchWrong, dispatchNameEmail, dispatchIndex,\n      dispatchScore, getToken, getQuestions, dispatchZero } = this.props;\n    dispatchCorrect(0);\n    dispatchWrong(0);\n    dispatchNameEmail('', '');\n    dispatchScore(0);\n    getToken();\n    getQuestions();\n    dispatchIndex(0);\n    dispatchZero(0, 0);\n  }\n\n  message() {\n    const { correctAnswers, score } = this.props;\n    return (\n      <div>\n        <p data-testid=\"feedback-total-score\">\n          { `Bowa! Seu score atual é: ${score}` }\n        </p>\n        <p data-testid=\"feedback-total-question\">\n          { `Acertou um total de: ${correctAnswers}` }\n        </p>\n      </div>\n    );\n  }\n\n  score() {\n    const { correctAnswers } = this.props;\n    const tres = 3;\n    if (correctAnswers >= tres) {\n      return (\n        <p data-testid=\"feedback-text\">\n          Mandou bem! Mas será que está em primeiro no ranking?\n        </p>\n      );\n    }\n    return <p data-testid=\"feedback-text\">Podia ser melhor...</p>;\n  }\n\n  render() {\n    return (\n      <div className=\"feedContainer\">\n        <FeedHeader />\n        <div className=\"feedCard\">\n          <div className=\"score\">{ this.message() }</div>\n          <Gz />\n          <div className=\"msg\">{ this.score() }</div>\n          <div className=\"feedBtns\">\n            <Link to=\"/\">\n              <button\n                className=\"btnReset\"\n                type=\"button\"\n                data-testid=\"btn-play-again\"\n                onClick={ this.setGlobalState }\n              >\n                Jogar novamente\n              </button>\n            </Link>\n            <Link to=\"/ranking\">\n              <button className=\"btnRanking\" type=\"button\" data-testid=\"btn-ranking\">\n                Ver Ranking\n              </button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ player }) => ({\n  correctAnswers: player.rightAnswers,\n  score: player.score,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchCorrect: (num) => dispatch(rightAnswers(num)),\n  dispatchWrong: (num) => dispatch(wrongAnswers(num)),\n  dispatchScore: (score) => dispatch(playerScore(score)),\n  dispatchNameEmail: (email, name) => dispatch(playerLogin(email, name)),\n  getToken: () => dispatch(requestApiToken()),\n  getQuestions: () => dispatch(requestApiQuestions()),\n  dispatchIndex: (index) => dispatch(updateIndex(index)),\n  dispatchZero: (score, right) => dispatch(setZeroState(score, right)),\n});\n\nFeedback.propTypes = {\n  dispatchZero: PropTypes.func.isRequired,\n  correctAnswers: PropTypes.number.isRequired,\n  dispatchIndex: PropTypes.func.isRequired,\n  score: PropTypes.number.isRequired,\n  dispatchNameEmail: PropTypes.func.isRequired,\n  getToken: PropTypes.func.isRequired,\n  getQuestions: PropTypes.func.isRequired,\n  dispatchCorrect: PropTypes.func.isRequired,\n  dispatchWrong: PropTypes.func.isRequired,\n  dispatchScore: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Feedback);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport Header from '../Components/Header';\nimport TriviaCardsBA from '../Components/TriviaCardsBA';\nimport TriviaCardsMA from '../Components/TriviaCardsMA';\nimport './answers.css';\nimport Feedback from './Feedback';\nimport './trivia.css';\n\nclass Trivia extends Component {\n  constructor(props) {\n    super(props);\n    this.update = this.update.bind(this);\n  }\n\n  update() {\n    const { questions } = this.props;\n    if (questions) {\n      const { questIndex } = this.props;\n      const i = parseInt(questIndex, 10);\n      const quest = questions[i];\n      return (Array(quest)).map((question) => (\n        (question.type === 'multiple')\n          ? <TriviaCardsMA question={ question } />\n          : <TriviaCardsBA question={ question } />\n      ));\n    }\n  }\n\n  render() {\n    const { questIndex, questions } = this.props;\n    const quatro = 4;\n    if (questions && questions.length === 0) {\n      return <Redirect to=\"/\" />;\n    }\n    if (questIndex > quatro) {\n      return <Feedback />;\n    }\n    return (\n      <div className=\"trivia\">\n        <Header />\n        <div className=\"triviaCards\">\n          { this.update() }\n        </div>\n      </div>\n    );\n  }\n}\n\nTrivia.propTypes = {\n  questions: PropTypes.arrayOf(Object).isRequired,\n  questIndex: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = ({ game }) => ({\n  questions: game.questions,\n  questIndex: game.index,\n});\n\nexport default connect(mapStateToProps)(Trivia);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  rightAnswers,\n  playerLogin,\n  requestApiToken,\n  requestApiQuestions,\n  wrongAnswers,\n  playerScore,\n  updateIndex,\n  setZeroState } from '../redux/actions';\nimport './ranking.css';\n\nclass Ranking extends Component {\n  constructor() {\n    super();\n    this.setGlobalState = this.setGlobalState.bind(this);\n  }\n\n  setGlobalState() {\n    const { dispatchCorrect, dispatchWrong, dispatchNameEmail, dispatchIndex,\n      dispatchScore, getToken, getQuestions, dispatchZero } = this.props;\n    dispatchCorrect(0);\n    dispatchWrong(0);\n    dispatchNameEmail('', '');\n    dispatchScore(0);\n    getToken();\n    getQuestions();\n    dispatchIndex(0);\n    dispatchZero(0, 0);\n  }\n\n  render() {\n    const players = JSON.parse(localStorage.getItem('ranking')) || [];\n    return (\n      <div className=\"rankingBg\">\n        <h1 className=\"rankingHeader\" data-testid=\"ranking-title\">Ranking</h1>\n        <div className=\"rankingContainer\">\n          { players.sort((player1, player2) => {\n            const um = 1;\n            const menosUm = -1;\n            const zero = 0;\n            if (player1.score > player2.score) {\n              return menosUm;\n            }\n            if (player1.score < player2.score) {\n              return um;\n            }\n            return zero;\n          }).map((player, index) => (\n            <div className={ `rankingCards ${index}` } key={ player.name }>\n              <img className=\"rankingImg\" src={ player.picture } alt=\"player\" />\n              <p\n                className=\"rankingName\"\n                data-testid={ `player-name-${index}` }\n              >\n                { `Nome: ${player.name}` }\n              </p>\n              <p\n                className=\"rankingScore\"\n                data-testid={ `player-score-${index}` }\n              >\n                { `Score: ${player.score}` }\n              </p>\n            </div>\n          ))}\n        </div>\n        <Link to=\"/\">\n          <button\n            className=\"goBack\"\n            type=\"button\"\n            data-testid=\"btn-go-home\"\n            onClick={ this.setGlobalState }\n          >\n            BACK TO HOME\n          </button>\n        </Link>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ player }) => ({\n  players: player.player,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchCorrect: (num) => dispatch(rightAnswers(num)),\n  dispatchWrong: (num) => dispatch(wrongAnswers(num)),\n  dispatchScore: (score) => dispatch(playerScore(score)),\n  dispatchNameEmail: (email, name) => dispatch(playerLogin(email, name)),\n  getToken: () => dispatch(requestApiToken()),\n  getQuestions: () => dispatch(requestApiQuestions()),\n  dispatchIndex: (index) => dispatch(updateIndex(index)),\n  dispatchZero: (score, right) => dispatch(setZeroState(score, right)),\n});\n\nRanking.propTypes = {\n  players: PropTypes.shape({\n    name: PropTypes.string,\n    assertions: PropTypes.number,\n    score: PropTypes.number,\n    gravatarEmail: PropTypes.string,\n  }).isRequired,\n  dispatchIndex: PropTypes.func.isRequired,\n  dispatchNameEmail: PropTypes.func.isRequired,\n  getToken: PropTypes.func.isRequired,\n  getQuestions: PropTypes.func.isRequired,\n  dispatchCorrect: PropTypes.func.isRequired,\n  dispatchWrong: PropTypes.func.isRequired,\n  dispatchScore: PropTypes.func.isRequired,\n  dispatchZero: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Ranking);\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './Pages/Login';\nimport Trivia from './Pages/Trivia';\nimport Ranking from './Pages/Ranking';\n\nclass App extends Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route path=\"/trivia\" component={ Trivia } />\n        <Route path=\"/ranking\" component={ Ranking } />\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","import { TIME_COUNTER, LOGIN, SCORE, WRONG, CORRECT, SET_ZERO } from '../actions/player';\n\nconst INITIAL_STATE = {\n  counter: 0,\n  email: '',\n  name: '',\n  rightAnswers: 0,\n  score: 0,\n  wrongAnswers: 0,\n  player: {\n    name: '',\n    assertions: 0,\n    score: 0,\n    gravatarEmail: '',\n  },\n};\n\nconst player = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case LOGIN:\n    return ({ ...state,\n      email: action.email,\n      name: action.name,\n      player: { ...state.player, name: state.name, gravatarEmail: state.email },\n    });\n  case SCORE:\n    return ({ ...state,\n      player: { ...state.player, score: action.score + state.score },\n      score: action.score + state.score,\n    });\n  case CORRECT:\n    return ({ ...state,\n      player: { ...state.player, assertions: state.rightAnswers + 1 },\n      rightAnswers: parseInt(state.rightAnswers, 10) + 1,\n    });\n  case TIME_COUNTER:\n    return ({ ...state,\n      counter: action.counter });\n  case WRONG:\n    return ({ ...state,\n      wrongAnswers: parseInt(state.wrongAnswers, 10) + 1,\n    });\n  case SET_ZERO:\n    return ({ ...state,\n      player: { ...state.player, assertions: action.right, score: action.score },\n      score: action.score,\n      rightAnswers: action.right,\n    });\n  default:\n    return state;\n  }\n};\n\nexport default player;\n","import { REQUEST_QUESTIONS, REQUEST_TOKEN, UPDATE_INDEX } from '../actions/game';\n\nconst INITIAL_STATE = {\n  token: {},\n  loading: false,\n  questions: [],\n  index: 0,\n};\n\nconst game = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case REQUEST_QUESTIONS:\n    return ({ ...state,\n      loading: true,\n      questions: action.questions,\n    });\n  case REQUEST_TOKEN:\n    return { ...state,\n      token: action.token,\n    };\n  case UPDATE_INDEX:\n    return { ...state,\n      index: action.index,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default game;\n","import { combineReducers } from 'redux';\nimport player from './player';\nimport game from './game';\n\nconst rootReducer = combineReducers({\n  player,\n  game,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}